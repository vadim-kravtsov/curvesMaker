"""
Author: Nicolas Cantale - n.cantale@gmail.com

Small module wrapping sextractor. The idea is to have a single function taking an image and returning a sextractor catalog.

Dependencies:
 - sextractor (mandatory)
 - astroasciidata (mandatory)
 - numpy (optional, needed for the array support)
 - pyfits (optional, needed for the array support)


Usage:

    import pysex
    cat = pysex.run(myimage, params=['X_IMAGE', 'Y_IMAGE', 'FLUX_APER'], conf_args={'PHOT_APERTURES':5})
    print cat['FLUX_APER']

"""

from math import hypot
import os, shutil
from os import path
import subprocess
import asciidatalocal as asciidata
from numpy import genfromtxt, argsort


def _setup_img(image, name):
    if not type(image) == type(''):
        import pyfits
        pyfits.writeto(name, image)
        

def _get_cmd(img, img_ref, conf_args):
    ref = img_ref if img_ref is not None else ''
        pathToFile = path.join("lib", "alipysex.sex")
        if os.name == "nt":  # we are on MS Windows now
                pathToSex = path.join("lib", "sex.exe")
        else:
                pathToSex = 'sex'
        cmd = ' '.join([pathToSex, ref, img, '-c %s ' % pathToFile])
    args = [''.join(['-', key, ' ', str(conf_args[key])]) for key in conf_args]
    cmd += ' '.join(args)
    return cmd


def _read_cat(path = 'alipysex.cat'):
    cat = asciidata.open(path)
    return cat

def _cleanup():
    files = [f for f in os.listdir('.') if 'alipysex.' in f]
    for f in files:
        os.remove(f)
        if path.exists('alipysex.cat'):
                os.remove('alipysex.cat')


def filterPolCat(catInName, catOutName, polarMode):
    matchDist = 2.0 
    polarMode = polarMode.lower()
    cat = genfromtxt(catInName)
    # Sort catalogue by x-coordinate
    cat = cat[argsort(cat[:,1])]
    pairs = []

    for i, obj in enumerate(cat):
        xObj = obj[1]
        yObj = obj[2]
        if polarMode == "x":
            xPair = xObj + 12.5
            yPair = yObj - 12.5
        elif polarMode == "y":
            xPair = xObj + 17.7
            yPair = yObj - 0.7
        minDist = 1e5

        for obj2 in cat[i:]:
            x2 = obj2[1]
            y2 = obj2[2]
            if x2 > xPair + 5:
                # Pair object can not be so far away from the original one
                break
            dist = hypot(x2-xPair, y2-yPair)
            if dist < minDist:
                minDist = dist
                pairObj = obj2
        if minDist < matchDist:
            # possible pair object found
            pairs.append((obj, pairObj))

    fout = open(catOutName, "w")
    fout.truncate(0)
    for objNum, pair in enumerate(pairs):
        outStr = " ".join([str(v) for v in pair[0][1:]])
        fout.write("%i %s\n" % (objNum+1, outStr))
    fout.close()



#def run(image='', imageref='', params=[], conf_file=DEFAULT_CONF, conf_args={}):
def run(image='', imageref='', params=[], conf_file=None, conf_args={}, keepcat=True, rerun=False, catdir=None, polarMode=None):
    """
    Run sextractor on the given image with the given parameters.
    
    image: filename or numpy array
    imageref: optional, filename or numpy array of the the reference image
    params: list of catalog's parameters to be returned
    conf_file: optional, filename of the sextractor catalog to be used
    conf_args: optional, list of arguments to be passed to sextractor (overrides the parameters in the conf file)
    
    
    keepcat : should I keep the sex cats ?
    rerun : should I rerun sex even when a cat is already present ?
    catdir : where to put the cats (default : next to the images)
    
    
    Returns an asciidata catalog containing the sextractor output
    
    Usage exemple:
        import pysex
        cat = pysex.run(myimage, params=['X_IMAGE', 'Y_IMAGE', 'FLUX_APER'], conf_args={'PHOT_APERTURES':5})
        print cat['FLUX_APER']
    """
    
    # Preparing permanent catalog filepath :
    (imgdir, filename) = os.path.split(image)
    (common, ext) = os.path.splitext(filename)
    catfilename = common + "alipysexcat" # Does not get deleted by _cleanup(), even if in working dir !
    if keepcat:
        if catdir:
            if not os.path.isdir(catdir):
                os.makedirs(catdir)
                #raise RuntimeError("Directory \"%s\" for pysex cats does not exist. Make it !" % (catdir))

    if catdir:    
        catpath = os.path.join(catdir, catfilename)
    else:
        catpath = os.path.join(imgdir, catfilename)
    
    # Checking if permanent catalog already exists :
    if rerun == False and type(image) == type(''):
        if os.path.exists(catpath):
            cat = _read_cat(catpath)
            return cat
    
    # Otherwise we run sex :
    conf_args['CATALOG_NAME'] = 'alipysex_orig.cat'
    conf_args['PARAMETERS_NAME'] = path.join('lib', 'alipysex.param')
    if 'VERBOSE_TYPE' in conf_args and conf_args['VERBOSE_TYPE']=='QUIET':
        verbose = False
    else: verbose = True 
    _cleanup()
    if (not type(image) == type(''))  and (not type(image) == type(u'')):
        import pyfits
        im_name = 'alipysex.fits'
        pyfits.writeto(im_name, image.transpose())
    else: im_name = image
    if (not type(imageref) == type('')) and (not type(imageref) == type(u'')):
        import pyfits
        imref_name = 'alipysex.ref.fits'
        pyfits.writeto(imref_name, imageref.transpose())
    else: imref_name = imageref
    cmd = _get_cmd(im_name, imref_name, conf_args)
    res = subprocess.call(cmd, shell=True)
    if res:
        print "Error during sextractor execution!"
        _cleanup()
        return

    # Clean polar data if necessary
    if polarMode == "x":
        filterPolCat("alipysex.cat")
    # Keeping the cat at a permanent location :
    if keepcat and type(image) == type(''):
        shutil.copy('alipysex.cat', catpath)
    
    # Returning the cat :         
    cat = _read_cat()
    # _cleanup()
    return cat

